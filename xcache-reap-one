#!/usr/bin/perl

$mb = 1024.*1024;

open L, ">>/l/L";
sub ll { 
	if ($ENV{do}) { 
		print L "@_[0]\n"; 
	} else {
		print "@_[0]\n"; 
	}
}
sub fuck { ll "@_[0]\n"; exit; }

$f = $ARGV[0];
($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
	$atime,$mtime,$ctime,$blksize,$blocks) = stat($f);
$ptn = $1 if $f =~ /\w\.(.*)/;
ll "DD: ==== $f";

$du = $blocks*$blksize;
fuck "EE: du:$du < size:$size" if ($du < $size);

$s = `head -c 4096 $f`;

($url) = $s =~ /GET (\S+)/;
($clen) = $s =~ /Content-Length: (\d+)/;
($crange) = $s =~ /Content-Range: bytes (\S+)/;
($host) = $s =~ /Host: (\S+)/;
fuck "EE: url empty" if !$url;

chomp(($sha, $ext, $fname) = split /\s+/, `xcache-urlinfo "$url"`);
ll "DD: url http://$host$url";
#ll "DD: ext $ext";
ll sprintf "DD: clen %.2lfM", $clen/$mb;
fuck "EE: clen $clen invalid" if ($clen < 0.5*$mb || $clen > 1024*$mb);
fuck "EE: size<clen size $size clen $clen" if ($size < $clen);

$start = rindex($s, "\r\n\r\n")+4;
fuck "EE: rnrn no found" if $start == -1;
ll "DD: start $start size $size";

chomp($r = `xcache-urltest $url`);
ll "DD: urltest $r";
fuck "EE: urltest failed" if ($r !~ /^ok/);

ll "DD: crange_orig $crange";
if (!$crange) {
	$crange = sprintf "0-%d/%d", $clen-1, $clen;
}
($rs, $re) = $crange =~ /(\d+)-(\d+)\/(\d+)/;
ll "DD: crange $crange rs $rs re $re";

$R = "/d/R.$sha";
#chomp($r = `xcache-rangetest-overwrite $R $crange`);
#ll "DD: rangetest $r";
#fuck "EE: rangetest failed" if ($r !~ /^ok/);

$suf = "$sha.$start.$clen.$rs.$re";
$t = time;
ll "DD: Done: $t $clen $sha $ext $url $suf";

if ($ENV{do}) {
	`head -c $start $f > /d/CH.$suf`;
	`mv $f /d/CF.$suf`;
	`mkdir -p /d/$sha`; `ln -sf /d/CF.$suf /d/$sha/$fname`;
	`xcache-combine-one /d $sha`;
}

ll;
